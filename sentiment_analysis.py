# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gsf044QnBggqcUVmjJuu0XuscSdsozLt
"""

import pandas as pd
import nltk
import csv
import pprint
from tqdm.notebook import tqdm
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('vader_lexicon')

df = pd.read_csv('/content/drive/MyDrive/Sentiment Analysis/Reviews - Reviews - Reviews - Reviews - Reviews (1).csv')

df.head()

type(df)

df=df.head(500)

df.info()

print(df['Text'][38])

sample=df['Text'][38]
token=nltk.word_tokenize(sample)
print(token)

nltk.pos_tag(token)

adj=''
for i in nltk.pos_tag(token):
  if i[1]=='JJ' and i[0] not in adj:
    adj+=i[0]+', '
print('The food has been described as ',adj[0:-2],'.')

from nltk.sentiment import SentimentIntensityAnalyzer

sia=SentimentIntensityAnalyzer()

sia.polarity_scores('I think the author should kill himself')

sia.polarity_scores('I hate this. Its the worst')

sia.polarity_scores(sample)

analyzed={}
for i,row in tqdm(df.iterrows(),total=len(df)):
  userid=row['Id']
  review=row['Text']
  analyzed[userid]=sia.polarity_scores(review)

pprint.pprint(analyzed)

vaders=pd.DataFrame(analyzed).T

print(vaders)

# !pip install transformers

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification as AMFSC
from scipy.special import softmax

rawmodel=f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer=AutoTokenizer.from_pretrained(rawmodel)
model=AMFSC.from_pretrained(rawmodel)

encoded_text=tokenizer(sample,return_tensors='pt')
output=model(**encoded_text)
detached=output[0][0].detach().numpy()
smax=softmax(detached)
print(smax)
print(sample)

def roberta_scores(query):
  encoded_text=tokenizer(query,return_tensors='pt')
  output=model(**encoded_text)
  output=output[0][0].detach().numpy()
  output=softmax(output)
  return output

roberta_scores("Fuck this shit")

def roberta_frontend(query):
  analyzed=roberta_scores(query)
  print('Positive--> ',analyzed[2]*100,'%')
  print('Neutral--> ',analyzed[1]*100,'%')
  print("Negative--> ",analyzed[0]*100,'%')

roberta_frontend("That's awesome! I'm going to kill myself now")

result={}
for i,row in tqdm(df.iterrows(),total=len(df)):
  userid=row['Id']
  review=row['Text']
  result[userid]=roberta_scores(review)

